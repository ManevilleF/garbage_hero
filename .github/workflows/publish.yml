name: Publish

on:
  release:
    types: [created]
  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PACKAGE: garbage_project

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            x86_64-unknown-linux-gnu,
            x86_64-pc-windows-msvc,
            aarch64-apple-darwin,
            x86_64-apple-darwin,
          ]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: .exe
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: wasm32-unknown-unknown
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-stable-${{ hashFiles('**/Cargo.toml') }}
      - name: Install alsa udev and gtk
        shell: bash
        run: >
          sudo apt-get update;
          sudo apt-get install
          --no-install-recommends -y
          libasound2-dev
          libudev-dev
          libgtk-3-dev
        if: runner.os == 'Linux'
      - name: Create Target dir
        run: |
          mkdir ${{ matrix.target }}
          cp -r assets ${{ matrix.target }}
      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }}
      - name: Move Build
        run: cp target/${{ matrix.target }}/release/${{ env.PACKAGE }}${{ matrix.ext }} ${{ matrix.target }}
        if: ${{ matrix.target }} != "wasm32-unknown-unknown"
      - name: Wasm bindgen
        run: |
          cargo install wasm-opt
          wasm-bindgen --out-dir ${{ matrix.target }} --target web "target/${{ matrix.target }}/release/${{ env.package }}.wasm"
          cp ${{ matrix.target}}/${{ env.package }}.wasm ${{ matrix.target }}/input.wasm
          wasm-opt -O -ol 100 -s 100 -o ${{ matrix.target}}/${{ env.package }}.wasm ${{ matrix.target}}/input.wasm
          cp index.html ${{ matrix.target }}/
        if: ${{ matrix.target }} == "wasm32-unknown-unknown"
      - name: Build zip
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: 'zip'
          path: ${{ matrix.target }}
          filename: '${{ env.PACKAGE }}_${{ matrix.target }}.zip'
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}_${{ matrix.target }}
          path: ${{ env.PACKAGE }}_${{ matrix.target }}.zip
          if-no-files-found: 'error'
